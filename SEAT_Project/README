LIBRERIE DA SCARICARE:
1) scaricare geopy per calcolare latitudine e longitudine: python -m pip install geopy
2) scaricare haversine per calcolare la distanza tra due punti: python -m pip install haversine
3) python -m pip install certifi 
4) python -m pip install numpy
5) python -m pip install statistics
6) python -m pip install grpcio
7) python -m pip install grpcio-tools
8) python -m pip install boto3
9) pip install geopy
10 ) pip install flask
11) pip install circuitbreaker


COMANDI DOCKER:
sudo docker ps -a
sudo docker rm -f <container-id> <-- separati da spazi
sudo docker build -t <tag> .
sudo docker run -dp 3000:3000 <tag>

sudo docker-compose up 
sudo docker-compose up --build
sudo docker-compose stop

sudo docker image ls
sudo docker image rmi -f <container-id>

sudo docker network ls
sudo docker network inspect <networkId> 
sudo docker network rm  111496a97204
sudo docker network inspect -f '{{json .Containers}}' 111496a97204 | jq '.[] | .Name + ":" + .IPv4Address'

sudo docker container exec -it 9cc0c687e8fd ls 
sudo docker container exec -it 9cc0c687e8fd  ls -a /root/.aws/credentials

sudo docker image prune --filter="dangling=true"
sudo docker-compose up --scale payment=2 --build

sudo docker run -it <tag>

COMANDI RABBITMQ:
sudo systemctl status rabbitmq-server
sudo systemctl stop rabbitmq-server
sudo systemctl start rabbitmq-server




PASSI PER COMPILARE:
1)  python -m grpc_tools.protoc -I. --python_out=.\accountingService --grpc_python_out=.\accountingService .\proto\grpc.proto
    python -m grpc_tools.protoc -I. --python_out=.\apiGateway --grpc_python_out=.\apiGateway .\proto\grpc.proto
    python -m grpc_tools.protoc -I. --python_out=.\reservationService --grpc_python_out=.\reservationService .\proto\grpc.proto
    python -m grpc_tools.protoc -I. --python_out=.\quoteService --grpc_python_out=.\quoteService .\proto\grpc.proto
    python -m grpc_tools.protoc -I. --python_out=.\reviewService --grpc_python_out=.\reviewService .\proto\grpc.proto
    python -m grpc_tools.protoc -I. --python_out=.\paymentService --grpc_python_out=.\paymentService .\proto\grpc.proto

2)
    python .\apiGateway\main.py
    python .\reservationService\main.py
    python .\quoteService\main.py
    python .\reviewService\main.py
    python .\emailService\main.py


LINK AL GRANT DI AMAZON: 
https://www.awsacademy.com/LMS_Login

Oss: Ogni volta che viene avviata la sessione di laboratorio bisogna modificare le credenziali(<-- Inserire il contenuto di AWS Details nel lab -> AWS CLI):
    1) Windows: C:\Users\ludov\.aws\credentials 
    2) Linux: $ gedit ~/.aws/credentials
    ~ <-- alt + 126 (Windows), alt gr + ì in Linux

INSTALLARE BOTO3: python -m pip install boto3

Su macchina ec2: 
LA CHIAVE ME-KEY (Private-key) E' STATA CREATA IN ec2 --> rete e sicurezza --> coppie di chiave. Si utilizza per 
connettersi alle istanze EC2 create (Viene specificata nel comando).

1) Creare la macchina virtuale su Aws ec2
2) Aggiungere alla VM il security group per accettare connessioni ssh
3) sudo yum install python3
4) sudo pip3 install grpcio
5) sudo pip3 install grpcio-tools
6) scp -i "me-key.pem" -r ./Progetto/ ec2-user@54.174.246.244:/home/ec2-user/
scp -i "me-key.pem" -r ./SEAt/SEAT_Project/ ubuntu@18.232.150.21:/home/ubuntu

7) ssh -i "me-key.pem" ec2-user@54.174.246.244
ssh -i "me-key.pem" ubuntu@18.232.150.21
Per eseguire sulla stessa macchina avviare due connessione ssh

Deploy su istanza ec2 con ansible:

Creare il file <nome>.yaml con i comandi da eseguire sulla MV
Creare hosts.ini specificando la chiave privata "me-key.pem" e gli indirizzi ip delle istanze di macchine virtuali
Creare il .service per eseguire l'applicazione come servizio
Crare file .sh con i comandi da eseguire su terminali

1) ansible-playbook -i galleryInventory.aws_ec2.yaml \
--private-key=/home/ludovico99/Scrivania/me-key.pem -u ec2-user \
deploy_gallery.yaml

2) ansible-playbook -v -i hosts.ini deploy.yaml


MICROSERVICES PORTS:
50056 <-- serviceRegistry
50055 <-- paymentService
50054 <-- reviewService
50053 <--- quoteService
50052 <-- accountingService
50051 <-- reservationService
AMQP port <-- EmailService

RABBITMQ:
1) Scaricare il server su https://www.rabbitmq.com/download.html
2) installare pika in python: python -m pip install pika --upgrade

Inserire cartella sbin di RABBITMQ nel path per sfruttare rabbitmq CLI!!!
rabbitmqctl help


PER FAR PARTIRE IL SERVER FLASK andare nella cartella dove c'è app.py:
set FLASK_APP=app.py
set FLASK_ENV=development
flask run -p 80 oppure python ./app.py



